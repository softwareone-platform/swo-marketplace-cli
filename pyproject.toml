[project]
name = "mpt-cli"
version = "2.0.0"
description = "Command line utility for SoftwareOne Marketplace Platform"
authors = [{ name = "SoftwareOne AG" }]
requires-python = ">=3.12,<4"
readme = "README.md"
license = {text = "Apache-2.0 license"}
keywords = [
    "fulfillment",
    "command",
    "line",
    "interface",
    "utility",
    "cli",
    "softwareone",
    "marketplace",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.12",
    "Topic :: Utilities",
]
dependencies = [
    "dependency-injector==4.48.*",
    "openpyxl==3.1.*",
    "pydantic==2.11.*",
    "pyfiglet==1.0.*",
    "python-dateutil==2.9.*",
    "requests==2.32.*",
    "requests-toolbelt==1.0.*",
    "typer==0.15.*",
]

[project.scripts]
mpt-cli = "cli.swocli:app"

[project.entry-points."cli.plugins"]
audit = "cli.plugins.audit_plugin.app:app"

[dependency-groups]
dev = [
    "freezegun==1.5.*",
    "ipdb==0.13.*",
    "ipython==9.*",
    "mypy==1.15.*",
    "pre-commit==4.2.*",
    "pytest==8.3.*",
    "pytest-cov==6.1.*",
    "pytest-deadfixtures==2.2.*",
    "pytest-mock==3.14.*",
    "pytest-randomly==3.16.*",
    "pytest-xdist==3.6.*",
    "responses==0.25.*",
    "ruff==0.12.11",  # force ruff version to have same formatting everywhere
    "types-openpyxl==3.1.*",
    "types-python-dateutil==2.9.*",
    "types-requests==2.31.*",
    "typing-extensions==4.13.*",
    "wemake-python-styleguide==1.3.*",
]

[tool.hatch.build.targets.sdist]
include = ["cli"]

[tool.hatch.build.targets.wheel]
include = ["cli"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pytest.ini_options]
testpaths = "tests"
pythonpath = "."
addopts = "--cov=cli --cov-report=term-missing --cov-report=html --cov-report=xml"
log_cli = false
filterwarnings = [
    "ignore:Support for class-based `config` is deprecated:DeprecationWarning",
    "ignore:pkg_resources is deprecated as an API:DeprecationWarning",
]
markers = [
  "integration: marks test as integration tests",
]

[tool.coverage.run]
branch = true
relative_files = true
source = ["cli"]

[tool.coverage.report]
exclude_also = [
    "if __name__ == \"__main__\":",
    "raise NotImplementedError",
]
include = [
    "cli/**",
    "cli/plugins/audit_plugin/**",
]
omit = [
    "*/__init__.py"
]

[tool.ruff]
# Ruff config: https://docs.astral.sh/ruff/settings
preview = true
target-version = "py312"
extend-exclude = [".vscode", ".devcontainer", "swo", "adobe_vipm/flows/pipeline.py"]
output-format = "full"
line-length = 100

[tool.ruff.format]
quote-style = "double"

[tool.ruff.lint]
select = [
  "A",    # flake8-builtins
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "C90",  # maccabe
  "COM",  # flake8-commas
  "D",    # pydocstyle
  "DTZ",  # flake8-datetimez
  "E",    # pycodestyle
  "ERA",  # flake8-eradicate
  "EXE",  # flake8-executable
  "F",    # pyflakes
  "FBT",  # flake8-boolean-trap
  "FLY",  # pyflint
  "FURB", # refurb
  "G",    # flake8-logging-format
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "ISC",  # flake8-implicit-str-concat
  "LOG",  # flake8-logging
  "N",    # pep8-naming
  "PERF", # perflint
  "PIE",  # flake8-pie
  "PL",   # pylint
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "Q",    # flake8-quotes
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # ruff
  "S",    # flake8-bandit
  "SIM",  # flake8-simpify
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "T100", # flake8-debugger
  "TRY",  # tryceratops
  "UP",   # pyupgrade
  "W",    # pycodestyle
  "YTT",  # flake8-2020
]
ignore = [
  "A005",   # allow to shadow stdlib and builtin module names
  "B904",  # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
  "COM812", # trailing comma, conflicts with `ruff format`
  # Different doc rules that we don't really care about:
  "D100",
  "D104",
  "D105", # docstring for magic methods
  "D106",
  "D107",
  "D203",
  "D212",
  "D401",
  "D404",
  "D405",
  "ISC001",  # implicit string concat conflicts with `ruff format`
  "ISC003",  # prefer explicit string concat over implicit concat
  "PLR09",   # we have our own complexity rules
  "PLR2004", # do not report magic numbers
  "PLR6301", # do not require classmethod / staticmethod when self not used
  "TRY003",  # long exception messages from `tryceratops`
]
external = [ "WPS" ]

# Plugin configs:
flake8-import-conventions.banned-from = [ "ast", "datetime" ]
flake8-import-conventions.aliases = { datetime = "dt" }
flake8-quotes.inline-quotes = "double"
mccabe.max-complexity = 6
pydocstyle.convention = "google"
pydocstyle.ignore-decorators = ["property"]


[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
  "D101", # missing docstring in public class
  "D102", # missing docstring in publich method
  "D103", # missing docstring in public function
  "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
  "S101", # asserts
  "S105", # hardcoded passwords
  "S404", # subprocess calls are for tests
  "S603", # do not require `shell=True`
  "S607", # partial executable paths
]

[tool.ruff.lint.isort]
known-third-party = ["cli"]

[tool.mypy]
warn_no_return = false
exclude = ["tests"]
plugins = ["pydantic.mypy"]
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
  "gunicorn.*",
  "pyfiglet.*",
]
ignore_missing_imports = true
